<?php
/**
 * @file
 * Module that sets up redirection to mobile app.
 *
 * Contains: menu hook, custom page, admin forms, validation, boilerplate
 */

/**
 * Implements hook_menu().
 */
function app_link_menu() {
  $items['app_link/%ctools_export_ui'] = array(
    'title' => 'App Redirect',
    'page callback' => 'app_link_bounce',
    'page arguments' => array(1),
    'load arguments' => array('applink_ctools_export_ui'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function app_link_theme($existing, $type, $theme, $path) {
  return array(
    'app_link' => array(
      'variables' => array(
        'platform_info' => '',
        'platform_data' => '',
        'scripts' => array(),
      ),
      'path' => $path . '/templates',
      'template' => 'app-link',
    ),
  );
}

/**
 * Prints html file by bypassing page.tpl.php.
 */
function app_link_bounce($applink) {
  $platform_data = $applink->platform_data;
  $fallback_url = app_link_get_fallback_url($applink);

  ctools_include('plugins');
  $platform_info = ctools_get_plugins('app_link', 'platform');
  // Inline JavaScript for performance, we want 0 external requests.
  $scripts = array();
  foreach ($platform_info as $platform) {
    if ($platform['js_src'] && empty($scripts[$platform['js_src']])) {
      $scripts[$platform['js_src']] = "<script" . ">" . file_get_contents($platform['js_src']) . "</script>";
    }
  }

  // Explode our text field of whitelisted paths into an array.
  foreach ($platform_data as &$data) {
    $data['path_whitelist'] = explode("\r\n", $data['path_whitelist']);
  }

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  print theme('app_link', array(
    'platform_info' => drupal_json_encode($platform_info),
    'platform_data' => drupal_json_encode($platform_data),
    'fallback_url' => drupal_json_encode($fallback_url),
    'scripts' => $scripts,
  ));

  // Do not just exit. Rather let Drupal run it's closure functions to
  // complete the request. Some modules depend on this.
  return NULL;
}

/**
 * Settings form for pattern to add/edit applink.
 */
function app_link_ctools_export_ui_form(&$form, &$form_state) {
  $applink = $form_state['item'];
  unset($form['info']);
  $form['path'] = array(
    '#default_value' => $applink->path,
    '#title' => t('Path'),
    '#description' => t('Site path to redirect to the mobile app.'),
    '#field_prefix' => url('app_link/', array('absolute' => TRUE)),
    '#type' => 'textfield',
    '#element_validate' => array('app_link_valid_id'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['platform_data'] = array(
    '#tree' => TRUE,
  );

  ctools_include('plugins');
  $platforms = ctools_get_plugins('app_link', 'platform');
  foreach ($platforms as $id => $platform) {
    if ($platform['form']) {
      $form_callback = $platform['form'];
      $platform_data = isset($applink->platform_data[$id]) ? $applink->platform_data[$id] : array();
      $form['platform_data'][$id] = $form_callback($platform_data);
    }
  }

  return $form;
}


/**
 * Ensures that, if a value is entered, it is a valid URL.
 */
function app_link_valid_url($element, &$form_state) {
  if (!empty($element['#value']) && filter_var($element['#value'], FILTER_VALIDATE_URL) === FALSE) {
    form_error($element, t('The @platform @field is an invalid URL', array(
      '@platform' => isset($element['#array_parents'][1]) ? $element['#array_parents'][1] : '',
      '@field' => $element['#title'],
    )));
  }
}

/**
 * Ensures that, if a value is entered, it is a valid URL Path.
 */
function app_link_valid_id($element, &$form_state) {
  if (!empty($element['#value']) && preg_match('/[^a-z0-9\-\_]/', $element['#value'])) {
    form_error($element, t('The @field is an invalid Path Idenfier', array(
      '@field' => $element['#title'],
    )));
  }
}

/**
 * Ensures that, if a value is entered, it is a valid RFC3986 URL Scheme Name.
 */
function app_link_valid_url_scheme($element, &$form_state) {
  if (!empty($element['#value']) && !preg_match('#^[a-z][a-z0-9\+\.\-]+://#', $element['#value'])) {
    form_error($element, t('The @field is an invalid URL Scheme', array(
      '@field' => $element['#title'],
    )));
  }
}

/**
 * Implements hook_permission().
 */
function app_link_permission() {
  return array(
    'administer app link' => array(
      'title' => t('Administer App Link entries'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function app_link_ctools_plugin_api($owner, $api) {
  if ($owner == 'app_link' && $api == 'default_applink') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function app_link_ctools_plugin_directory($module, $type) {
  if ($module == 'app_link' && $type == 'platform') {
    return 'platforms';
  }
  if ($type == 'export_ui') {
    return 'plugins/' . $type;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function app_link_ctools_plugin_type() {
  return array(
    'platform' => array(
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Add query string and path configuration to a platform form.
 *
 * @param array $conf
 *   The current configuration of the platform plugin.
 * @param array &$form
 *   The form to be modified.
 */
function app_link_qs_path_form(array $conf, array &$form) {
  $form['supports_qs'] = array(
    '#title' => t("Append the query string to the App's URL Scheme"),
    '#description' => t("If checked, the query string will be appended the App's URL Scheme, example:\n/app_link/myapp?a=b&c=d\nmyapp://?a=b&c=d"),
    '#type' => 'checkbox',
    '#default_value' => isset($conf['supports_qs']) ? $conf['supports_qs'] : FALSE,
  );

  $form['supports_path'] = array(
    '#title' => t('Append the "path" param to the App\'s URL Scheme'),
    '#description' => t("If checked, we'll pass the 'path' query-string parameter will be appended to the App's URL Scheme, example:\n/app_link/myapp?path=/settings\nmyapp://settings"),
    '#type' => 'checkbox',
    '#default_value' => isset($conf['supports_path']) ? $conf['supports_path'] : FALSE,
  );

  $form['path_whitelist'] = array(
    '#title' => t('Whitelisted app paths'),
    '#description' => t('JavaScript regular expressions, one per line, without leading or trailing slashes, that describe allowed paths within a URL or intent. Paths that do not match will not be redirected to. Do not whitelist all paths, as that could allow open redirects if an app is vulnerable.'),
    '#type' => 'textarea',
    '#default_value' => isset($conf['path_whitelist']) ? $conf['path_whitelist'] : '',
  );
}

